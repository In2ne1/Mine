#include<iostream>
using namespace std;
#include<string>
//读入一个字符串str，输出字符串str中的连续最长的数字串
//eg：输入：abcd12345ed125ss123456789
//输出：123456789

class Solution
{
public:
    string longestNumStr(string &A)
    {
        int size = 0;  //记录出现数字串的长度
        int count = 0;  //记录最长数字串的长度
        int pos = 0;  //记录数字串开始出现的起始位置
        A.push_back('a');  //防止最后一个是数字无法算进size内
        for(int i = 0; i < A.size() - 1; i++)
        {
            if(A[i] >= '0' && A[i] <= '9')  
            {
                 if(A[i + 1] >= '0' && A[i + 1] <= '9')  //如果i位置是数字字符，i+也是size再++
                 {
                     size++;
                 }
                else  
                {
                    size += 1;  //如果只有i+1位置不是数字字符，size就加上最开始出现数字串的位置的那一次
                    if(size > count)  //记录最长的数字字符串信息
                    {
                        count = size;
                        pos = i - count + 1;
                    }
                    size = 0;  //size清零
                }
            }
        }
        A = A.substr(pos,count);  //将最长的一段数字字符串剪切给A
        return A;
    }
};
int main()
{
    string A;
    Solution aa;
    cin >> A;
    aa.longestNumStr(A);
    for (auto &ii : A)
    {
        cout << ii;
    }
    return 0;
}

法二：
#include<iostream>
using namespace std;
#include<string>
int main()
{
	string str, res, cur;
	cin >> str;
	for (int i = 0; i < str.length(); i++)
	{
		if (str[i] >= '0' && str[i] <= '9')
		{
			cur += str[i];
		}
		else
		{
			if (res.size() < cur.size())  //找出更长的字符串，则更新字符串
			{
				res = cur;
			}
			else
			{
				cur.clear();
			}
		}
	}
	cout << res;
	return 0;
}
