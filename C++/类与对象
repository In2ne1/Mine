#include<iostream>
#include<fstream>
using namespace std;

#if 0  //struct是一个简化的类，不加private默认为公有的
struct A{   //结构体书写是 应按变量的从小到大或从大到小书写
	int a;
	double b;
};
struct B{
	A a;
	char b;
};
struct C{   //struct B相当于struct C
	int a;
	double b;
	char c;

	void printA()   //成员函数中可以直接使用自己的成员变量
	{
		printf("%d", a);
	}
	void printB();   //声明,成员函数不占用struct的空间，只是在struct这个域内
};
void C::printB()  //定义
{
	printf("%.2lf", b);
}
struct D {  //空结构体占一个字节，C语言中不允许存在空结构体

};

int main()
{
	cout << sizeof(A) << endl << sizeof(B) << endl << sizeof(C) << endl << sizeof(D);
	cout << endl;

	C test;
	test.a = 5;
	test.printA();  //成员函数中可以直接使用自己的成员变量
	cout << endl;

	test.b = 3.14;
	test.printB();

	system("pause");
	return 0;
}
#endif



#if 0
class ct {
	int a;  //私有变量，只能通过成员函数访问
public:   //不加public就默认为private
	double b;
	char c;
	void printA()
	{
		printf("%d", a);
	}
	void change(int i)
	{
		a = i;
	}
	void printB();
	void test()
	{

	}
};   //注意分号
void ct::printB()
{
	printf("%.2lf", b);
}

int main()
{
	ct a;
	ct b;
	ct* pc = nullptr;  
	//test.a = 5;
	a.change(5);  //成员函数
	a.printA();  //成员函数中可以直接使用自己的成员变量
	cout << endl;

	a.b = 3.14;
	a.printB();
	b.b = 4.13;
	b.printB();
	//相当于
	//void printB(Data* this)  //this指针
	//{
	//	cout << this->b << endl;
	//}
	cout << endl;

	pc->printA();  //空指针，有成员函数，有成员变量，只有编译可以通过
	pc->test(); //无成员变量，有成员函数，允许调用

	system("pause");
	return 0;
}
#endif


#if 0

class Poker {
	int m_type;
	int m_point;
public:
	Poker() : m_type(0), m_point(0)   //无参构造函数
	{}

	//Poker()  //两种写法
	//{
	//	m_type = 0;
	//	m_point = 0;
	//}

	Poker(int type, int point)  //有参构造函数
	{
		type = m_type;
		point = m_point;
	}

	Poker(const Poker &p) //拷贝构造函数
	{
		m_point = p.m_point;
		m_type = p.m_type;
	}

	~Poker()  //析构函数 在主函数return结束后调用
	{}
};

void test()
{
	Poker p1;
}

//Poker::~Poker()
int main()
{
	Poker card(2, 3);   //带参构造函数
	Poker card1 = card;  //拷贝构造
	//Poker card1(card);  //拷贝构造 第二种写法

	Poker p;
	


	system("pause");
	return 0;
}
#endif

#if 0
class Test2
{
	Test2(int b)
	{

	}
};

class Test
{
public:
	const int i;
	int &ri;
	//auto c;   //错误

	//Test()
	//{
	//	//i = 4;  //i是const不能赋值,编译不通过，写在大括号里是初始化赋值，广义初始化
	//	ri = i;  
	//}
	Test(int &a) : i(3), ri(a) //狭义初始化,可以给const赋值
	{
	}

};

int main()
{

	system("pause");
	return 0;
}
#endif
#if 0
class A {
public: A() { ++_scount; }
		A(const A& t) { ++_scount; }
		static int GetACount() { return _scount; }
private:
	static int _scount;
};
int A::_scount = 0;

int main()
{
	cout << A::GetACount() << endl; A a1, a2; A a3(a1);
	cout << A::GetACount() << endl;
	system("pause");
	return 0;
}
#endif
#if 0
class Date
{
private:
	int m_year;
	int m_month;
	int m_day;
public:
	Date(int year, int month, int day): m_year(year), m_month(month), m_day(day)
	{}

	friend ostream& operator<<(ostream& cout, Date d);  //友元函数,cout多次调用，printf只调用一次

	friend class test;  //友元类
};

class test  //可单方面调用Date中的私有成员
{
public:
	test()
	{
		Date day(2019, 12, 15);
		cout << day.m_year << day.m_month << day.m_day << endl;
	}
};
//输出流:ostream   输入流:istream
ostream& operator<<(ostream& cout, Date d)   //友元函数定义。无this指针，除了只能访问私有函数外，和普通函数无区别
{
	cout << d.m_year << "." << d.m_month << "." << d.m_day;
	return cout;
}
int main()
{
	Date d(2017, 12, 24);
	cout << d << endl;   //输出流函数重载，直接可以调用输出对象

	ofstream cout("1.txt");  //文件流操作
	cout << d;

	system("pause");
	return 0;
}
#endif
#if 0
class Date; // 前置声明
class Time
{
private:
	int _hour;
	int _minute;
	int _second;
	
public:
	Time(int hour, int minute, int second)
		: _hour(hour)
		, _minute(minute)
		, _second(second)
	{}
	friend class Date;  // 声明日期类为时间类的友元类，则在日期类中就直接访问Time类中的私有成员变量

};

class Date
{
private:
	int _year;
	int _month;
	int _day;
	Time _t;
public:
	Date(int year = 1900, int month = 1, int day = 1)
		: _year(year)
		, _month(month)
		, _day(day)
		, _t(22,22,22)
	{}
	//Time t(22,11,11);
	void SetTimeOfDate(int hour, int minute, int second)
	{
		// 直接访问时间类私有的成员变量
		_t._hour = hour;
		_t._minute = minute;
		_t._second = second;
	}
};

int main()
{
	Time t(24,25,14);
	Date d;

}
#endif

