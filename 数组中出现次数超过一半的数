#include<iostream>
using namespace std;
#include<algorithm>
#include<vector>
//数组中有一个数字出现的次数超过数组长度的一半
//找出这个数字，并输出
//eg：输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}
//由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2
//如果不存在，则输出0

class Solution {
public:
    int MoreThanHalfNum_Solution(vector<int> numbers) 
    {
        if(numbers.empty())
        {
            return 0;
        }
        sort(numbers.begin(), numbers.end());   //sort给数组排序，sort第三个参数默认为升序
        int num = numbers.size() / 2;  //排序后中间的数一定是出现次数最多的数
        int count = 0;
        for(int i = 0; i < numbers.size(); i++)  //遍历数组查看是否是出现最多的数字
        {
            if(numbers[i] == numbers[num])
            {
                count++;
            }
        }
        if(count > numbers.size() / 2)  //若是，则返回这个数
        {
            return numbers[num];
        }
        else  //否则返回0
        {
            return 0;
        }
    }
};


法二：
//如果有符合条件的数字，则它出现的次数比其他所有数字出现的次数和还要多。在遍历数组时保存两个值：
//一是数组中一个数字，一是次数。遍历下一个数字时，若它与之前保存的数字相同，则次数加1，否则次数减1
//若次数为0，则保存下一个数字，并将次数置为1。遍历结束后，所保存的数字即为所求。然后再判断它是否符合条件即可。
class Solution
{
public:
	int MoreThanHalfNum_Solution(vector<int>numbers)
	{
		if (numbers.empty())
		{
			return 0;
		}
		int result = numbers[0];  //遍历每个元素，并记录次数；若与前一个元素相同，则次数加1，否则减1
		int times = 1;  //次数
		for (int i = 1; i < numbers.size(); i++)
		{
			if (times == 0)
			{
				result = numbers[i];  //更新result的值为当前元素，并置数为1
				times = 1;
			}
			else if (numbers[i] == result)
			{
				++times;  //相同则加1
			}
			else
			{
				--times;  //不同则减1
			}
		}
		times = 0;
		for (int i = 0; i < numbers.size()l i++)
		{
			if (numbers[i] == result)
			{
				++times;
			}
		}
		return (times > numbers.size() / 2) ? result : 0;
	}
};
