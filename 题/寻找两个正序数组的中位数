给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。

请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。


示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0

示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5

class Solution {
public:
    double func(vector<int> &nums1, vector<int> &nums2, int k)
    {
        int p = 0;
        int q = 0;
        while(1)
        {
            if(p == nums1.size())  //其一跑完了
                return nums2[q + k - 1];
            if(q == nums2.size())
                return nums1[p + k - 1];
            if(k == 1)  //p和q中较小的即为所求
			    return nums1[p] < nums2[q] ? nums1[p] : nums2[q];
            if(nums1[p] >= nums2[q])
                q++;
            else
                p++;
            k--;
        }
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2)
    {
        int len = nums1.size() + nums2.size();
        int k = len / 2;
        if(nums1.size() == 0)  //其一为空
            return nums2.size() % 2 == 0 ? (nums2[k - 1] + nums2[k]) / 2.0 : nums2[k];
        if(nums2.size() == 0)
            return nums1.size() % 2 == 0 ? (nums1[k - 1] + nums1[k]) / 2.0 : nums1[k];
        if(len % 2 == 0)  //偶，则返回两个中位元素
            return (func(nums1, nums2, k) + func(nums1, nums2, k + 1)) / 2.0;
        else  //奇
            return func(nums1, nums2, k + 1);
    }
};
