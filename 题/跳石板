#include <iostream> 
#include <vector>
#include <algorithm>
using namespace std;  
//小易在一条石板路前，每块石板上从1挨着编号为：1、2、3...
//小易当前所在的编号为K的石板，且单次只能往前跳K的一个约数(不含1和K)步
//即跳到K + X(X为K的一个非1和本身 的约数)的位置。 
//小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去
//最少需要跳跃几次可以到达
//eg： N = 4，M = 24
//4->6->8->12->18->24 
//最少需要跳跃5次，就可以从4号石板跳到24号石板 

void divisorNum(int n, vector<int> &divNum)//计算约数，求除了1和本身的约数
{
	for (int i = 2; i <= sqrt(n); i++) 
	{
		if (n % i == 0)
		{
			divNum.push_back(i);
			if (n / i != i)//非平方数时还有另一个数也要加入 
				divNum.push_back(n / i); 
		}
	}
}
int Jump(int N, int M) 
{ 
	vector<int> stepNum(M + 1, 0);  //储存的到达此stepNum点的步数，初始N为1步，从N到N为1步
	stepNum[N] = 1; 
	for (int i = N; i < M; i++)
	{
		vector<int> divNum;   //N的所有约数，即为从本身这个点开始能走的数量  
		if (stepNum[i] == 0)  //0代表这个点不能到
			continue; 
		divisorNum(i, divNum);  //求出所有能走的步数储存在divNum的容器中
		for (int j = 0; j < divNum.size(); j++)
		{
			if ((divNum[j] + i) <= M && stepNum[divNum[j] + i] != 0)  //由位置i出发能到达的点为 stepNum[divNum[j]+i] 
				stepNum[divNum[j] + i] = min(stepNum[divNum[j] + i], stepNum[i] + 1);
			else if ((divNum[j] + i) <= M) 
				stepNum[divNum[j] + i] = stepNum[i] + 1; 
		}
	}
	if (stepNum[M] == 0) 
		return -1; 
	else//初始化时多给了一步，故需要减1 
		return stepNum[M] - 1;
}
int main()
{
	int n, m; 
	cin >> n >> m; 
	cout << Jump(n, m) << endl;
	return 0; 
}
