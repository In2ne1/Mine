#include<iostream>
using namespace std;
#include<vector>
// 1 *  *  *  *  *  *  *  *  1  *  *  *  *  *
//2  *  *  *  *  *  *  *  1  1  1  *  *	 *  *
//3  *  *  *  *  *  *  1  2  3  2  1  *	 *  *
//4  *  *  *  *  *  1  3  6  7  6  3  1  *  *
//5  *  *  *  1  4 10 16 19 16 10  4  1  *  *
//6  *  *  1  5 15 30 45 51 45 30 15  5  1  *
//7  *  1  6 21 50 90 126 ... ...
//8  1  7  28 ... ...
//输入n表示第n行，输出该行第一个偶数出现的下标
//若没有则返回-1
//eg：输入3，则输出2
//eg：输入4，则输出3
class Solution
{
public:
	int func(int n)
	{
		vector<int> v1;
		vector<int> v2;
		int j = n;
		for (int i = 0; i < 2 * n - 1; i++)  //先在v1内存第一行
		{
			if (i == (2 * n - 1) / 2)  //输入n行，则第n行有n*2-1个元素
				v1.push_back(1);
			else
				v1.push_back(0);  //前面的行内 没有数据的地方填0
		}
		j--;
		while (j > 0)
		{
			for (int i = 0; i < 2 * n - 1; i++)  //借助v1算出下一行并存入v2中，最后再赋给v1
			{
				if (i == 0)
					v2.push_back(v1[i] + v1[i + 1]);
				else if (i == 2 * n - 2)
					v2.push_back(v1[i - 1] + v1[i]);
				else
					v2.push_back(v1[i - 1] + v1[i] + v1[i + 1]);
			}
			v1 = v2;
			v2.clear();
			j--;
		}
		for (int i = 0; i < 2 * n - 1; i++)  //遍历第n行的数组内容，找出第一个偶数并返回
		{
			if (v1[i] % 2 == 0)
				return i + 1;
		}
		return -1;  //没有偶数则返回-1
	}
};
int main()
{
	Solution aa;
	int n;
	cin >> n;
	cout << aa.func(n);
	return 0;
}
