给定一组字符，使用原地算法将其压缩。
压缩后的长度必须始终小于或等于原数组长度。
数组的每个元素应该是长度为1 的字符（不是 int 整数类型）。
在完成原地修改输入数组后，返回数组的新长度。

输入：
["a","a","b","b","c","c","c"]
输出：
返回6，输入数组的前6个字符应该是：["a","2","b","2","c","3"]

输入：
["a","b","b","b","b","b","b","b","b","b","b","b","b"]

输出：
返回4，输入数组的前4个字符应该是：["a","b","1","2"]。
说明：
由于字符"a"不重复，所以不会被压缩。"bbbbbbbbbbbb"被“b12”替代。
注意每个数字在数组中都有它自己的位置。

class Solution {
public:
    int compress(vector<char>& chars) 
    {
        vector<char> tmp;
        vector<int> num;
        tmp.push_back(chars[0]);
        int count = 1;
        chars.push_back('0');
        for(int i = 1; i < chars.size(); i++)
        {
            if(chars[i] == chars[i - 1])
                count++;
            else
            {
                if(count > 1)
                {
                    if(count < 9)
                        tmp.push_back(count + '0');
                    else
                    {
                        for(int j = count; j > 0; j /= 10)
                            num.push_back(j % 10);
                        for(int j = num.size() - 1; j >= 0; j--)
                            tmp.push_back(num[j] + '0');
                        num.clear();
                    }
                }
                tmp.push_back(chars[i]);
                count = 1;
            }
        }
        tmp.pop_back();
        chars.clear();
        chars = tmp;
        return chars.size();
    }
};