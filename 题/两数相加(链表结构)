给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        int len1 = 1, len2 = 1;
        ListNode* p = l1;
        ListNode* q = l2;
        for(; p->next; p = p->next)
            len1++;
        for(; q->next; q = q->next)
            len2++;
        if(len1 > len2)
            for(int i = len1 - len2; i > 0; i--)
            {
                q->next = new ListNode(0);
                q = q->next;
            }
        if(len1 < len2)
            for(int i = len2 - len1; i > 0; i--)
            {
                p->next = new ListNode(0);
                p = p->next;
            }
        ListNode* ans = new ListNode(-1);
        ListNode* head = ans;
        int add = 0;
        p = l1;
        q = l2;
        while(p != NULL && q != NULL)
        {
            int num = p->val + q->val + add;
            add = num / 10;
            ans->next =  new ListNode(num % 10);
            ans = ans->next;
            p = p->next;
            q = q->next;
        }
        if(add != 0)
            ans->next = new ListNode(add);
        return head->next;
    }
};
