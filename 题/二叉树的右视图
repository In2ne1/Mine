给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。

       1       <----
     /   \    
   2      3       <----
     \       \
      5      4      <----

示例:
输入: [1,2,3,null,5,null,4]
输出: [1, 3, 4]

解题思路：层序遍历，用num记录每层的最后一个节点元素，当遍历到该元素时，直接将节点元素的val放入ans数组中


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    vector<int> rightSideView(TreeNode* root) 
    {
        vector<int> ans;
        if(!root)  //当二叉树为空时，直接返回ans
            return ans;
        queue<TreeNode*> q;
        TreeNode* cur = root;
        q.push(cur);
        TreeNode* num = cur;
        while(!q.empty())  //root节点入队后，开始层序遍历
        {
            if(cur->left)
                q.push(cur->left);
            if(cur->right)
                q.push(cur-> right);
            if(num->val == cur->val)
            {
                ans.push_back(num->val);
                num = q.back();
            }
            q.pop();
            cur = q.front();
        }
        return ans;
    }
};
