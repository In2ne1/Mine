#include<iostream>
#include<vector>
using namespace std;
//玩家初始能力值为a，每个怪物防御力为b1,b2...bn.
//如果遇到怪物防御力<=玩家当前能力值，可增加能力值bi
//如果怪物防御力>玩家当前能力值，可增加能力值c与bi的最大公约数
//求最终能力值为多少
//输入：怪物数量n 和初始能力值
//      怪物防御力列表
//输出：最终能力值
class Solution
{
public:
    int powerLevel(vector<int> monsterLevel, int playerLevel)
    {
        for(auto &ii : monsterLevel)
        {
            if(ii <= playerLevel)
            {
                playerLevel += ii;
            }
            else
            {
                playerLevel += maxCommonDivisor(ii, playerLevel);
            }
        }
        return playerLevel;
    }
    int maxCommonDivisor(int num1, int num2)  //求最大公约数
    {
        if(num1 > num2)
            swap(num1, num2);
        for(int i = num1; i >= 1; i--)
        {
            if(num1 % i == 0 && num2 % i == 0)
            {
                return i;
                break;
            }
        }
    }
};
int main()
{
    Solution aa;
    int monsterNum;
    int playerLevel;
    vector<int> monsterLevel;
    int value;
    while(cin >> monsterNum >> playerLevel)
    {
        for(int i = 0; i < monsterNum; i++)
        {
            cin >> value;
            monsterLevel.push_back(value);
        }
        cout << aa.powerLevel(monsterLevel, playerLevel) << endl;
        monsterLevel.clear();
    }
    return 0;
}
