给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 //法一：
 //该解法会产生大数越界问题
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) 
    {
        stack<int> st;
        ListNode* cur = l1;
        int num1 = 0, num2 = 0;
        for(; cur; cur = cur->next)
            st.push(cur->val);
        while(!st.empty())
        {
            num1 = num1 * 10 + st.top();
            st.pop();
        }
        cur = l2;
        for(; cur; cur = cur->next)
            st.push(cur->val);
        while(!st.empty())
        {
            num2 = num2 * 10 + st.top();
            st.pop();
        }
        int num = num1 + num2;
        ListNode* ans = new ListNode(0);
        ListNode* head = ans;
        if(num == 0)
        {
            return head;
        }
        while(num > 0)
        {
            ans->next = new ListNode(num % 10);
            ans = ans->next;
            num /= 10;
        }
        return head->next;
    }
};
