#include<iostream>
using namespace std;
#include<string>
//从一个字符串中删除所有另一个字符串含有的字符
//eg: 从"They are student."中删除"aeiou"字符
//变为"Thy r stdnt."

class Solution
{
public:
    string deleteC(string s1, string s2)
    {
        int find = 1;
        string tmp;
        while (s2.size())
        {
            find = s1.find(s2.substr(0,1));  //找到要删除的其中一个字符，s2中的第一个字符
            while (find != -1)  //当find返回值为-1时，就没有要删除的字符
            {
                tmp = s1;   //保存s1字符中要删除字符的前后两部分，然后拼接在一起
                s1 = s1.substr(0, find);
                tmp = tmp.substr(find + 1, tmp.size());
                s1 = s1 + tmp;  //拼接
                find = s1.find(s2.substr(0, 1));  //重新置位要删除的字符
            }
            s2 = s2.substr(1, s2.size() - 1);  //删完s2中的第一个字符后，截去第一个字符
        }
        return s1;
    }
};
int main()
{
    string s1;
    string s2;
    Solution aa;

    getline(cin, s1);  //用getline函数从键盘连续输入字符串并赋给string类字符串
    getline(cin, s2);
    cout << aa.deleteC(s1, s2);

    return 0;
}


法二：
哈希映射法
#include<iostream>
using namespace std;
#include<string>
int main()
{
	string str1, str2;
	getline(cin, str1);
	getline(cin, str2);
	int hashtable[256] = { 0 };  //哈希映射思想先用str2统计字符出现的次数
	for (size_t i = 0; i < str2.size(); ++i)  //遍历str1.shr1[i]映射哈希表，对应位置为0，则表示这个字符在
	{                                         //str2中未出现，则将它+=到ret中
		hashtable[str2[i]]++;
	}
	string ret;
	for (size_t i = 0; i < str1.size(); ++i)
	{
		if (hashtable[str1[i]] == 0)
		{
			ret += str1[i];
		}
	}
	cout << ret << endl;
	return 0;
}
